/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adj.demo.model.impl;

import com.adj.demo.model.Candidate;
import com.adj.demo.model.CandidateModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;POC_Candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CandidateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CandidateImpl
 * @generated
 */
@JSON(strict = true)
public class CandidateModelImpl
	extends BaseModelImpl<Candidate> implements CandidateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate model instance should use the <code>Candidate</code> interface instead.
	 */
	public static final String TABLE_NAME = "POC_Candidate";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"candidateId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"phoneNo", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"Skills", Types.VARCHAR}, {"education", Types.VARCHAR},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Skills", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("education", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table POC_Candidate (uuid_ VARCHAR(75) null,candidateId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,phoneNo VARCHAR(75) null,email VARCHAR(75) null,Skills VARCHAR(75) null,education VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table POC_Candidate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY candidate.firstName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY POC_Candidate.firstName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRSTNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidate.class;
	}

	@Override
	public String getModelClassName() {
		return Candidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Candidate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Candidate, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Candidate)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Candidate, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Candidate, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Candidate)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Candidate, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Candidate, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Candidate, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Candidate, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Candidate, Object>>();
		Map<String, BiConsumer<Candidate, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Candidate, ?>>();

		attributeGetterFunctions.put("uuid", Candidate::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Candidate, String>)Candidate::setUuid);
		attributeGetterFunctions.put("candidateId", Candidate::getCandidateId);
		attributeSetterBiConsumers.put(
			"candidateId",
			(BiConsumer<Candidate, Long>)Candidate::setCandidateId);
		attributeGetterFunctions.put("groupId", Candidate::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Candidate, Long>)Candidate::setGroupId);
		attributeGetterFunctions.put("companyId", Candidate::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Candidate, Long>)Candidate::setCompanyId);
		attributeGetterFunctions.put("userId", Candidate::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Candidate, Long>)Candidate::setUserId);
		attributeGetterFunctions.put("userName", Candidate::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Candidate, String>)Candidate::setUserName);
		attributeGetterFunctions.put("createDate", Candidate::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Candidate, Date>)Candidate::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Candidate::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Candidate, Date>)Candidate::setModifiedDate);
		attributeGetterFunctions.put("firstName", Candidate::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<Candidate, String>)Candidate::setFirstName);
		attributeGetterFunctions.put("lastName", Candidate::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Candidate, String>)Candidate::setLastName);
		attributeGetterFunctions.put("phoneNo", Candidate::getPhoneNo);
		attributeSetterBiConsumers.put(
			"phoneNo", (BiConsumer<Candidate, String>)Candidate::setPhoneNo);
		attributeGetterFunctions.put("email", Candidate::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Candidate, String>)Candidate::setEmail);
		attributeGetterFunctions.put("Skills", Candidate::getSkills);
		attributeSetterBiConsumers.put(
			"Skills", (BiConsumer<Candidate, String>)Candidate::setSkills);
		attributeGetterFunctions.put("education", Candidate::getEducation);
		attributeSetterBiConsumers.put(
			"education",
			(BiConsumer<Candidate, String>)Candidate::setEducation);
		attributeGetterFunctions.put("status", Candidate::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Candidate, Integer>)Candidate::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Candidate::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Candidate, Long>)Candidate::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Candidate::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Candidate, String>)Candidate::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Candidate::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<Candidate, Date>)Candidate::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_candidateId = candidateId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFirstName() {
		return getColumnOriginalValue("firstName");
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getPhoneNo() {
		if (_phoneNo == null) {
			return "";
		}
		else {
			return _phoneNo;
		}
	}

	@Override
	public void setPhoneNo(String phoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNo = phoneNo;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getSkills() {
		if (_Skills == null) {
			return "";
		}
		else {
			return _Skills;
		}
	}

	@Override
	public void setSkills(String Skills) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Skills = Skills;
	}

	@JSON
	@Override
	public String getEducation() {
		if (_education == null) {
			return "";
		}
		else {
			return _education;
		}
	}

	@Override
	public void setEducation(String education) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_education = education;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Candidate.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Candidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidate toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Candidate>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setUuid(getUuid());
		candidateImpl.setCandidateId(getCandidateId());
		candidateImpl.setGroupId(getGroupId());
		candidateImpl.setCompanyId(getCompanyId());
		candidateImpl.setUserId(getUserId());
		candidateImpl.setUserName(getUserName());
		candidateImpl.setCreateDate(getCreateDate());
		candidateImpl.setModifiedDate(getModifiedDate());
		candidateImpl.setFirstName(getFirstName());
		candidateImpl.setLastName(getLastName());
		candidateImpl.setPhoneNo(getPhoneNo());
		candidateImpl.setEmail(getEmail());
		candidateImpl.setSkills(getSkills());
		candidateImpl.setEducation(getEducation());
		candidateImpl.setStatus(getStatus());
		candidateImpl.setStatusByUserId(getStatusByUserId());
		candidateImpl.setStatusByUserName(getStatusByUserName());
		candidateImpl.setStatusDate(getStatusDate());

		candidateImpl.resetOriginalValues();

		return candidateImpl;
	}

	@Override
	public Candidate cloneWithOriginalValues() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		candidateImpl.setCandidateId(
			this.<Long>getColumnOriginalValue("candidateId"));
		candidateImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		candidateImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		candidateImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		candidateImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		candidateImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		candidateImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		candidateImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		candidateImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		candidateImpl.setPhoneNo(
			this.<String>getColumnOriginalValue("phoneNo"));
		candidateImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		candidateImpl.setSkills(this.<String>getColumnOriginalValue("Skills"));
		candidateImpl.setEducation(
			this.<String>getColumnOriginalValue("education"));
		candidateImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		candidateImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		candidateImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		candidateImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return candidateImpl;
	}

	@Override
	public int compareTo(Candidate candidate) {
		int value = 0;

		value = getFirstName().compareTo(candidate.getFirstName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Candidate)) {
			return false;
		}

		Candidate candidate = (Candidate)object;

		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Candidate> toCacheModel() {
		CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

		candidateCacheModel.uuid = getUuid();

		String uuid = candidateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			candidateCacheModel.uuid = null;
		}

		candidateCacheModel.candidateId = getCandidateId();

		candidateCacheModel.groupId = getGroupId();

		candidateCacheModel.companyId = getCompanyId();

		candidateCacheModel.userId = getUserId();

		candidateCacheModel.userName = getUserName();

		String userName = candidateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			candidateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			candidateCacheModel.createDate = createDate.getTime();
		}
		else {
			candidateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			candidateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			candidateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		candidateCacheModel.firstName = getFirstName();

		String firstName = candidateCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			candidateCacheModel.firstName = null;
		}

		candidateCacheModel.lastName = getLastName();

		String lastName = candidateCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			candidateCacheModel.lastName = null;
		}

		candidateCacheModel.phoneNo = getPhoneNo();

		String phoneNo = candidateCacheModel.phoneNo;

		if ((phoneNo != null) && (phoneNo.length() == 0)) {
			candidateCacheModel.phoneNo = null;
		}

		candidateCacheModel.email = getEmail();

		String email = candidateCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			candidateCacheModel.email = null;
		}

		candidateCacheModel.Skills = getSkills();

		String Skills = candidateCacheModel.Skills;

		if ((Skills != null) && (Skills.length() == 0)) {
			candidateCacheModel.Skills = null;
		}

		candidateCacheModel.education = getEducation();

		String education = candidateCacheModel.education;

		if ((education != null) && (education.length() == 0)) {
			candidateCacheModel.education = null;
		}

		candidateCacheModel.status = getStatus();

		candidateCacheModel.statusByUserId = getStatusByUserId();

		candidateCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = candidateCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			candidateCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			candidateCacheModel.statusDate = statusDate.getTime();
		}
		else {
			candidateCacheModel.statusDate = Long.MIN_VALUE;
		}

		return candidateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Candidate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Candidate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Candidate)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Candidate>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Candidate.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _candidateId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private String _phoneNo;
	private String _email;
	private String _Skills;
	private String _education;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Candidate, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Candidate)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("candidateId", _candidateId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("phoneNo", _phoneNo);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("Skills", _Skills);
		_columnOriginalValues.put("education", _education);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("candidateId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("firstName", 256L);

		columnBitmasks.put("lastName", 512L);

		columnBitmasks.put("phoneNo", 1024L);

		columnBitmasks.put("email", 2048L);

		columnBitmasks.put("Skills", 4096L);

		columnBitmasks.put("education", 8192L);

		columnBitmasks.put("status", 16384L);

		columnBitmasks.put("statusByUserId", 32768L);

		columnBitmasks.put("statusByUserName", 65536L);

		columnBitmasks.put("statusDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Candidate _escapedModel;

}